import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import './payment-result.css';

const PaymentResult = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [status, setStatus] = useState('loading');
  const [orderInfo, setOrderInfo] = useState(null);

  useEffect(() => {
    const checkPaymentResult = async () => {
      try {
        console.log('üîç Current URL:', window.location.href);
        console.log('üîç All URL params:', Object.fromEntries(searchParams));
        
        // L·∫•y t·∫•t c·∫£ parameters t·ª´ URL
        const urlStatus = searchParams.get('status');
        const orderId = searchParams.get('orderId');
        const amount = searchParams.get('amount');
        const transactionId = searchParams.get('transactionId');
        const message = searchParams.get('message');
        const resultCode = searchParams.get('resultCode');
        
        console.log('üì¶ Extracted params:', { 
          urlStatus, 
          orderId, 
          amount, 
          transactionId, 
          message, 
          resultCode 
        });
        
        // Set th√¥ng tin order t·ª´ URL
        if (orderId && amount) {
          const orderData = {
            orderId: orderId,
            amount: parseInt(amount) , 
            transactionId: transactionId,
            resultCode: resultCode,
            message: message
          };
          
          setOrderInfo(orderData);
          console.log('üìÑ Order info set:', orderData);
        }
        
        // X·ª≠ l√Ω tr·∫°ng th√°i d·ª±a tr√™n URL params
        if (urlStatus === 'success') {
          console.log('‚úÖ Payment successful!');
          setStatus('success');
          
          // G·ªçi API x√°c nh·∫≠n thanh to√°n n·∫øu c·∫ßn
          if (orderId) {
            try {
              const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/orders/orders/id/${orderId}`);
              if (response.ok) {
                const orderData = await response.json();
                console.log('‚úÖ Order verified:', orderData);
              }
            } catch (error) {
              console.error('Error verifying order:', error);
            }
          }
          
        } else if (urlStatus === 'failed') {
          console.log('‚ùå Payment failed!');
          setStatus('failed');
          
        } else if (urlStatus === 'error') {
          console.log('‚ö†Ô∏è Payment error!');
          setStatus('error');
          
        } else {
          // N·∫øu kh√¥ng c√≥ status r√µ r√†ng, ki·ªÉm tra message
          if (message === 'payment_success') {
            setStatus('success');
          } else if (message === 'payment_failed') {
            setStatus('failed');
          } else {
            console.log('‚ö†Ô∏è Unknown status, defaulting to error');
            setStatus('error');
          }
        }
        
        // Cleanup localStorage
        localStorage.removeItem('pendingOrder');
        localStorage.removeItem('paymentResult');
        
      } catch (error) {
        console.error('üí• Error checking payment result:', error);
        setStatus('error');
      }
    };

    // Ch·ªâ ch·∫°y n·∫øu c√≥ searchParams
    if (searchParams.toString()) {
      checkPaymentResult();
    } else {
      console.log('‚ö†Ô∏è No search params found');
      setStatus('error');
    }
  }, [searchParams]);

  const handleReturnHome = () => {
    navigate('/');
  };

  const handleRetryPayment = () => {
    navigate('/payment');
  };

  const handleViewOrders = () => {
    navigate('/order');
  };

  if (status === 'loading') {
    return (
      <div className="payment-result-container">
        <div className="payment-result-card">
          <div className="loading-spinner"></div>
          <h2>ƒêang x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n...</h2>
          <p>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t</p>
        </div>
      </div>
    );
  }

  if (status === 'success') {
    return (
      <div className="payment-result-container">
        <div className="payment-result-card success">
          <div className="icon success-icon">‚úÖ</div>
          <h2>Thanh to√°n th√†nh c√¥ng!</h2>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng. ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
          
          {orderInfo && (
            <div className="order-summary">
              <h3>Th√¥ng tin ƒë∆°n h√†ng</h3>
              <div className="order-detail">
                <span>M√£ ƒë∆°n h√†ng:</span>
                <span className="highlight">{orderInfo.orderId}</span>
              </div>
              <div className="order-detail">
                <span>S·ªë ti·ªÅn:</span>
                <span className="highlight">
                  {new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND'
                  }).format(orderInfo.amount)}
                </span>
              </div>
              {orderInfo.transactionId && (
                <div className="order-detail">
                  <span>M√£ giao d·ªãch:</span>
                  <span className="highlight">{orderInfo.transactionId}</span>
                </div>
              )}
            </div>
          )}
          
          <div className="action-buttons">
            <button className="btn primary" onClick={handleViewOrders}>
              Xem ƒë∆°n h√†ng
            </button>
            <button className="btn secondary" onClick={handleReturnHome}>
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (status === 'failed') {
    return (
      <div className="payment-result-container">
        <div className="payment-result-card failed">
          <div className="icon failed-icon">‚ùå</div>
          <h2>Thanh to√°n th·∫•t b·∫°i</h2>
          <p>ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.</p>
          
          {orderInfo && (
            <div className="order-summary">
              <div className="order-detail">
                <span>M√£ ƒë∆°n h√†ng:</span>
                <span>{orderInfo.orderId}</span>
              </div>
              {orderInfo.resultCode && (
                <div className="order-detail">
                  <span>M√£ l·ªói:</span>
                  <span>{orderInfo.resultCode}</span>
                </div>
              )}
            </div>
          )}
          
          <div className="action-buttons">
            <button className="btn primary" onClick={handleRetryPayment}>
              Th·ª≠ l·∫°i thanh to√°n
            </button>
            <button className="btn secondary" onClick={handleReturnHome}>
              V·ªÅ trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  return (
    <div className="payment-result-container">
      <div className="payment-result-card error">
        <div className="icon error-icon">‚ö†Ô∏è</div>
        <h2>C√≥ l·ªói x·∫£y ra</h2>
        <p>Kh√¥ng th·ªÉ x√°c ƒë·ªãnh k·∫øt qu·∫£ thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.</p>
        
        {/* Debug info */}
        <details className="debug-info">
          <summary>Th√¥ng tin debug</summary>
          <pre>{JSON.stringify(Object.fromEntries(searchParams), null, 2)}</pre>
        </details>
        
        <div className="action-buttons">
          <button className="btn primary" onClick={handleReturnHome}>
            V·ªÅ trang ch·ªß
          </button>
        </div>
      </div>
    </div>
  );
};

export default PaymentResult;